- We use "null" value to represent an absence of object. Using "Null Object" pattern we can provide an
alternate representation to indicate an absence of object.
- Most important characteristic of a null object is that it'll basically do nothing and store nothing when an
operation is called on it.
- Null object seems like a proxy as it stands in for a real object, however a proxy at some point will use real
object or transform to a real object and even in absence of the real object proxy will provide some behavior
with side effect. Null object will not do any such thing. Null object don't transform into real object.
- We use this pattern when we want to treat absence of a collaborator transparently without null checks.
- Null object pattern allows us to represent absence of a real object as a do nothing object.
- Method implementations in a Null object will not do anything. In case a return is expected, these methods will
return a sensible, hard-coded default value.
- Classes which use Null object won't be aware of presence of this special implementation. Whole purpose of the pattern
is to avoid null checks in other classes.
- Null object do not transform into real objects, nor do they use indirections to real objects.