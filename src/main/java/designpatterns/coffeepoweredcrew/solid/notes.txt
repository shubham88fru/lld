S - Single Responsibility Principle
O - Open Closed Principle
L - Liskov Substitution Principle
I - Interface Segregation Principle
D - Dependency Inversion Principle

1) S
----
- "There should never be more than one reason for a class to change."
- A class provides a very focused, single functionality, addresses a specific concern.
- A class has only a single reason for changing.

2) O
----
- "Software entities (Classes, Modules, Methods etc.) should be open for extension, but closed for modif."
- Avoid modifying existing base classes an use inheritance/overriding to extend and write modifications.
- Basically, ab abstract base class which has some concrete methods (closed for modification) and abstract methods
  which are supposed to be overriden by subclasses (open for extension).

3) L
----
- "We should be able to substitute base class objects with child class objects & this should not alter behavior/characteristics
   of program."
- Basically, liskov substitution principle will fail if the sub class modifies the behaviour/contract of the base
  class in the overriden method. For e.g., when square was a sub class of rectangle, it was modifying the behaviour of
  setHeight and setLength method by overriding the value of the other when any of the two was modified. And so,
  the overriden methods in Square were actually breaking the contract guaranteed by Rectangle class that if we set Height/Length
  to a value, we'll get the value on calling getHeight/getLength. And so, Considering Square and a Child of Rectangle
  defies the Liskov's substitution principle. Therefore, we have no option, but to break that parent-child relationship
  in case of Square and Rectangle in OOPs.

4) I
----
- "Clients should not be forced to depend upon interfaces that they do not use."
- In particular, clients should not have to depend on methods of interfaces that they don't need.
- Related to `Interface Pollution` problem. We shouldn't make our interfaces overly large. We shouldn't
    cram methods in interfaces that are unrelated. Doing so unnecessarily forces the classes that wish to
    implement such interfaces to provide implementation of methods which they don't even need.
    e.g. throwing UnsupportedOperationException() from an implemented method etc.
- Write Highly Cohesive interfaces. Break larger interfaces into smaller cohesive interfaces.

5) D
----
- "A) Hi level modules should not depend upon low level modules. Both should depend upon abstractions."
- "B) Abstractions should not depend upon details. Details should depend upon abstractions."
- Idea is to program against interfaces instead of concretions. Assume that the container or someone will give
  you an implementation of the interface. The provided implementation will be the one the container wants you to run.
- This principle enforces the idea of loose coupling.

